// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Controls /> renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Controls
    currentSlide={1}
    onToggleNext={[Function]}
    onTogglePrev={[Function]}
    slideCount={6}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <glamorous(button)
          disabled={false}
          onClick={[Function]}
        >
          <Icon
            iconColour="#222526"
            iconName="chevron-solid-left"
            iconSize={18}
          />
        </glamorous(button)>,
        <glamorous(div)>
          <glamorous(span)>
            2
          </glamorous(span)>
           /
           
          <glamorous(span)>
            6
          </glamorous(span)>
        </glamorous(div)>,
        <glamorous(button)
          disabled={false}
          onClick={[Function]}
        >
          <Icon
            iconColour="#222526"
            iconName="chevron-solid-right"
            iconSize={18}
          />
        </glamorous(button)>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Icon
            iconColour="#222526"
            iconName="chevron-solid-left"
            iconSize={18}
          />,
          "disabled": false,
          "onClick": [Function],
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "iconColour": "#222526",
            "iconName": "chevron-solid-left",
            "iconSize": 18,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <glamorous(span)>
              2
            </glamorous(span)>,
            " /",
            " ",
            <glamorous(span)>
              6
            </glamorous(span)>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "2",
            },
            "ref": null,
            "rendered": "2",
            "type": [Function],
          },
          " /",
          " ",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "6",
            },
            "ref": null,
            "rendered": "6",
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Icon
            iconColour="#222526"
            iconName="chevron-solid-right"
            iconSize={18}
          />,
          "disabled": false,
          "onClick": [Function],
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "iconColour": "#222526",
            "iconName": "chevron-solid-right",
            "iconSize": 18,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <glamorous(button)
            disabled={false}
            onClick={[Function]}
          >
            <Icon
              iconColour="#222526"
              iconName="chevron-solid-left"
              iconSize={18}
            />
          </glamorous(button)>,
          <glamorous(div)>
            <glamorous(span)>
              2
            </glamorous(span)>
             /
             
            <glamorous(span)>
              6
            </glamorous(span)>
          </glamorous(div)>,
          <glamorous(button)
            disabled={false}
            onClick={[Function]}
          >
            <Icon
              iconColour="#222526"
              iconName="chevron-solid-right"
              iconSize={18}
            />
          </glamorous(button)>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Icon
              iconColour="#222526"
              iconName="chevron-solid-left"
              iconSize={18}
            />,
            "disabled": false,
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "iconColour": "#222526",
              "iconName": "chevron-solid-left",
              "iconSize": 18,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <glamorous(span)>
                2
              </glamorous(span)>,
              " /",
              " ",
              <glamorous(span)>
                6
              </glamorous(span)>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "2",
              },
              "ref": null,
              "rendered": "2",
              "type": [Function],
            },
            " /",
            " ",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "6",
              },
              "ref": null,
              "rendered": "6",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Icon
              iconColour="#222526"
              iconName="chevron-solid-right"
              iconSize={18}
            />,
            "disabled": false,
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "iconColour": "#222526",
              "iconName": "chevron-solid-right",
              "iconSize": 18,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
